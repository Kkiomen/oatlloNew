{
    "title": "PHP – loops: for, while, do…while, and foreach",
    "description": "Learn loops in PHP: for, while, do…while, and foreach. Repeat code and control program flow with practical examples.",
    "position": 5,
    "slug": "loop",
    "full_description": "<h1>Loops in PHP – for, while, do…while, and foreach</h1><p>Loops allow you to execute a block of code multiple times until a specific condition is met. In PHP, we have several types of loops: <strong>for</strong>, <strong>while</strong>, <strong>do…while</strong>, and <strong>foreach</strong>. Each of them is useful in different scenarios.</p><h2>For loop</h2><p>Most often used when the number of repetitions is known.</p><pre><code class=\"language-php\">&lt;?php\nfor ($i = 0; $i &lt; 5; $i++) {\n    echo \"Iteration: $i &lt;br&gt;\";\n}\n</code></pre><h2>While loop</h2><p>Executes code as long as the condition is true.</p><pre><code class=\"language-php\">&lt;?php\n$i = 0;\nwhile ($i &lt; 5) {\n    echo \"Counter: $i &lt;br&gt;\";\n    $i++;\n}\n</code></pre><h2>Do…while loop</h2><p>Executes the code at least once and then checks the condition.</p><pre><code class=\"language-php\">&lt;?php\n$i = 0;\ndo {\n    echo \"Counter: $i &lt;br&gt;\";\n    $i++;\n} while ($i &lt; 5);\n</code></pre><h2>Foreach loop</h2><p>Designed for iterating over arrays and objects.</p><pre><code class=\"language-php\">&lt;?php\n$fruits = [\"apple\", \"banana\", \"pear\"];\n\nforeach ($fruits as $fruit) {\n    echo $fruit . \"&lt;br&gt;\";\n}\n\n$user = [\"name\" =&gt; \"John\", \"age\" =&gt; 25];\n\nforeach ($user as $key =&gt; $value) {\n    echo \"$key: $value&lt;br&gt;\";\n}\n</code></pre><h2>Break and continue statements</h2><ul><li><code>break</code> – stops the loop</li><li><code>continue</code> – skips to the next iteration</li></ul><pre><code class=\"language-php\">&lt;?php\nfor ($i = 1; $i &lt;= 10; $i++) {\n    if ($i == 5) continue; // skip 5\n    if ($i == 8) break;   // stop at 8\n    echo $i . \" \";\n}\n</code></pre><h2>Best practices</h2><ol><li>Avoid infinite loops – always make sure the condition will eventually be met.</li><li>For large datasets, use <code>foreach</code> – it is the most readable.</li><li>Use <code>break</code> and <code>continue</code> only when they truly improve logic clarity.</li></ol><section class=\"faq\"><h2>FAQ</h2><h3>When should I use for and when while?</h3><p><code>for</code> is best when the number of iterations is known. <code>while</code> is used when the number of repetitions is not predetermined.</p><h3>What’s the difference between do…while and while?</h3><p><code>do…while</code> guarantees at least one execution, whereas <code>while</code> may not run at all if the condition is false initially.</p><h3>Does foreach work only with arrays?</h3><p>No – since PHP 5, foreach also works with objects that implement the <code>Iterator</code> interface.</p></section>"
}
