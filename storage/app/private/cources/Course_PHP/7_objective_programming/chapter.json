{
    "title": "PHP – object-oriented programming: classes, objects, inheritance",
    "description": "Learn the basics of object-oriented programming in PHP: classes, objects, properties, methods, inheritance, interfaces, and encapsulation.",
    "position": 7,
    "slug": "objective-programming",
    "full_description": "<h1>Object-oriented programming in PHP – classes, objects, inheritance</h1><p>Object-oriented programming (OOP) is a paradigm in which code is organized into <strong>classes</strong> and <strong>objects</strong>. Thanks to it, applications become more structured, scalable, and easier to maintain. In this chapter, you will learn the basic OOP concepts in PHP: defining classes, creating objects, encapsulation, inheritance, interfaces, and polymorphism.</p><h2>Defining classes and creating objects</h2><pre><code class=\"language-php\">&lt;?php\nclass User {\n    public string $name;\n    public int $age;\n\n    public function __construct(string $name, int $age) {\n        $this-&gt;name = $name;\n        $this-&gt;age = $age;\n    }\n\n    public function introduce(): string {\n        return \"Hi, my name is {$this-&gt;name} and I am {$this-&gt;age} years old.\";\n    }\n}\n\n$user = new User(\"John\", 25);\necho $user-&gt;introduce();\n</code></pre><h2>Properties and methods</h2><ul><li><strong>Properties</strong> – fields (variables) belonging to an object.</li><li><strong>Methods</strong> – functions defined inside a class.</li><li>Keywords <code>public</code>, <code>protected</code>, and <code>private</code> define visibility.</li></ul><h2>Inheritance</h2><p>Allows creating child classes that inherit functionality from a base class.</p><pre><code class=\"language-php\">&lt;?php\nclass Animal {\n    public function speak(): string {\n        return \"The animal makes a sound.\";\n    }\n}\n\nclass Dog extends Animal {\n    public function speak(): string {\n        return \"Woof woof!\";\n    }\n}\n\n$dog = new Dog();\necho $dog-&gt;speak(); // Woof woof!\n</code></pre><h2>Polymorphism and interfaces</h2><p>Polymorphism allows different classes to respond in unique ways to the same method. Interfaces define contracts that classes must implement.</p><pre><code class=\"language-php\">&lt;?php\ninterface Logger {\n    public function log(string $msg): void;\n}\n\nclass FileLogger implements Logger {\n    public function log(string $msg): void {\n        file_put_contents(\"app.log\", $msg . \"\\n\", FILE_APPEND);\n    }\n}\n\n$logger = new FileLogger();\n$logger-&gt;log(\"Test entry\");\n</code></pre><h2>Encapsulation</h2><p>Encapsulation means hiding a class’s internal implementation and exposing only the necessary methods.</p><pre><code class=\"language-php\">&lt;?php\nclass BankAccount {\n    private float $balance = 0;\n\n    public function deposit(float $amount): void {\n        if ($amount &gt; 0) {\n            $this-&gt;balance += $amount;\n        }\n    }\n\n    public function getBalance(): float {\n        return $this-&gt;balance;\n    }\n}\n</code></pre><h2>Abstract classes</h2><p>They cannot be instantiated; they serve as templates for other classes.</p><pre><code class=\"language-php\">&lt;?php\nabstract class Shape {\n    abstract public function area(): float;\n}\n\nclass Circle extends Shape {\n    public function __construct(private float $r) {}\n\n    public function area(): float {\n        return pi() * $this-&gt;r * $this-&gt;r;\n    }\n}\n</code></pre><h2>Best practices</h2><ol><li>Use encapsulation – prefer <code>private</code> and <code>protected</code> over making everything <code>public</code>.</li><li>Enable <code>strict_types</code> and type both properties and methods.</li><li>Use interfaces and abstract classes to design contracts.</li><li>Apply the <em>Single Responsibility</em> principle – one class should handle one thing.</li></ol><section class=\"faq\"><h2>FAQ</h2><h3>What’s the difference between an interface and an abstract class?</h3><p>An interface defines only method signatures with no implementation. An abstract class can contain both abstract methods and partial implementation.</p><h3>Does PHP support multiple inheritance?</h3><p>No, but you can use <em>traits</em> to share code across classes.</p><h3>When should I use an abstract class and when an interface?</h3><p>Use an interface when you want to define a contract for multiple classes. Use an abstract class when you want to provide a shared base with partial implementation.</p></section>"
}
