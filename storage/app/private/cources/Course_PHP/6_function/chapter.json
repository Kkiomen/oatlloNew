{
    "title": "PHP – functions: definitions, parameters, types, and scope",
    "description": "Learn functions in PHP: definitions, parameters and default values, argument and return types, variable scope, references, as well as anonymous and arrow functions.",
    "position": 6,
    "slug": "function",
    "full_description": "<h1>Functions in PHP – definitions, parameters, types, and scope</h1><p>Functions organize code, allow reuse, and make testing easier. In this chapter, you will learn how to define functions, pass parameters (including by reference), use argument and return type declarations, understand variable scope, and work with anonymous and arrow functions.</p><h2>Defining and calling functions</h2><pre><code class=\"language-php\">&lt;?php\nfunction greet(string $name): string {\n    return \"Hello, $name!\";\n}\n\necho greet(\"John\"); // Hello, John!\n</code></pre><h2>Parameters: default, references, variadic</h2><ul><li><strong>Default values</strong> – set a default argument when not provided at the call.</li><li><strong>By reference</strong> – prefix parameters with <code>&amp;</code> to modify the original variable.</li><li><strong>Variadic</strong> – use <code>...</code> to accept any number of arguments.</li></ul><pre><code class=\"language-php\">&lt;?php\nfunction addPrefix(string $txt = \"\", string $prefix = \"app:\"): string {\n    return $prefix . $txt;\n}\n\nfunction increment(int &amp;$x): void { $x++; }\n\nfunction sumAll(int ...$nums): int { return array_sum($nums); }\n\n$val = 5; increment($val); // $val = 6\n</code></pre><h2>Argument and return types</h2><p>Since PHP 7+, you can (and should) type parameters and return values; since PHP 8, <em>union types</em> and the <code>mixed</code> type are available.</p><pre><code class=\"language-php\">&lt;?php\ndeclare(strict_types=1);\n\nfunction parseId(int|string $id): int {\n    return (int)$id;\n}\n\nfunction maybeUser(bool $exists): ?array {\n    return $exists ? [\"id\" =&gt; 1, \"name\" =&gt; \"John\"] : null; // ?array means nullable\n}\n</code></pre><p>Useful annotations: <code>int</code>, <code>string</code>, <code>float</code>, <code>bool</code>, <code>array</code>, <code>callable</code>, <code>object</code>, <code>iterable</code>, <code>mixed</code>, union types <code>int|string</code>, nullable types <code>?string</code>.</p><h2>Variable scope</h2><ul><li><strong>Local</strong> – variable lives inside the function body.</li><li><strong>Global</strong> – available everywhere, but inside functions requires <code>global</code> or superglobals.</li><li><strong>Static</strong> – remembers its value between calls.</li></ul><pre><code class=\"language-php\">&lt;?php\n$g = 1; // global\n\nfunction counter(): int {\n    static $i = 0; // retains state\n    return ++$i;\n}\n\nfunction useGlobal(): int {\n    global $g; // access global\n    return $g + 1;\n}\n</code></pre><h2>Anonymous functions (Closures) and arrow functions</h2><p>Anonymous functions can be assigned to variables and passed as <code>callable</code>. They can access external variables using <code>use</code>. Arrow functions (<code>fn</code>) are shorter and automatically capture variables by value.</p><pre><code class=\"language-php\">&lt;?php\n$rate = 1.23;\n$vat = function (float $net) use ($rate): float {\n    return $net * $rate;\n};\n\necho $vat(100.0); // 123.0\n\n$inc = fn(int $x): int =&gt; $x + 1;\necho $inc(5); // 6\n</code></pre><h2>Higher-order functions: map, filter, reduce</h2><pre><code class=\"language-php\">&lt;?php\n$nums = [1, 2, 3, 4, 5];\n$even = array_filter($nums, fn($n) =&gt; $n % 2 === 0);\n$squared = array_map(fn($n) =&gt; $n * $n, $nums);\n$sum = array_reduce($nums, fn($c, $n) =&gt; $c + $n, 0);\n</code></pre><h2>Named arguments and order (PHP 8)</h2><pre><code class=\"language-php\">&lt;?php\nfunction box(string $text, int $padding = 2, string $char = \"-\") {}\n\nbox(text: \"Hello\", char: \"*\"); // you can skip padding using named arguments\n</code></pre><h2>Best practices</h2><ol><li>Enable <code>declare(strict_types=1);</code> and always type parameters and return values.</li><li>A function should do one thing – short and clear (Single Responsibility).</li><li>Avoid side effects; return values instead of modifying global state.</li><li>Use descriptive names and document contracts (PHPDoc if needed).</li></ol><section class=\"faq\"><h2>FAQ</h2><h3>When should I use references <code>&amp;</code>?</h3><p>Only when you need to modify the passed argument or optimize large structures. In most cases, pass by value.</p><h3>What’s the difference between a closure and an arrow function?</h3><p>An arrow function is a shorthand for simple expressions; closures are full anonymous functions, can have a block of code, and explicit <code>use</code>.</p><h3>Does typing slow down code?</h3><p>The overhead is minimal, while the gain in quality and error detection is huge. In practice, it’s worth typing everything.</p></section>"
}
