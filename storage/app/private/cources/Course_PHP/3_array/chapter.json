{
    "title": "PHP – arrays: declarations, operations, sorting, and functions",
    "description": "Learn about arrays in PHP: declarations, operations, iterations, sorting, and built-in functions. Practice working with simple, associative, and multidimensional arrays.",
    "full_description": "<h1>Arrays in PHP – a complete guide</h1><p>Arrays in PHP are one of the most important data structures. They allow you to store multiple values in a single variable. In this chapter, you will learn how to declare arrays, perform operations, iterate, sort, and use PHP’s rich set of built-in functions.</p><h2>Declaring arrays</h2><pre><code class=\"language-php\">&lt;?php\n// Indexed array\n$fruits = [\"apple\", \"banana\", \"orange\"];\n\n// Associative array\n$user = [\n    \"name\" =&gt; \"John\",\n    \"age\" =&gt; 25,\n    \"active\" =&gt; true\n];\n\n// Multidimensional array\n$matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n</code></pre><h2>Accessing elements</h2><pre><code class=\"language-php\">echo $fruits[0]; // apple\necho $user[\"name\"]; // John\n</code></pre><h2>Basic operations</h2><ul><li><code>count($array)</code> – number of elements</li><li><code>array_push($array, $value)</code> – add element</li><li><code>array_pop($array)</code> – remove the last element</li><li><code>unset($array[$index])</code> – remove a selected element</li><li><code>in_array($value, $array)</code> – check if a value exists</li></ul><h2>Iterating over arrays</h2><pre><code class=\"language-php\">foreach ($fruits as $fruit) {\n    echo $fruit . \"\\n\";\n}\n\nforeach ($user as $key =&gt; $value) {\n    echo \"$key: $value\\n\";\n}\n</code></pre><h2>Sorting arrays</h2><ul><li><code>sort($array)</code> – sort ascending</li><li><code>rsort($array)</code> – sort descending</li><li><code>asort($array)</code> – sort associative array by values</li><li><code>ksort($array)</code> – sort associative array by keys</li></ul><pre><code class=\"language-php\">$numbers = [3, 1, 4, 2];\nsort($numbers);\nprint_r($numbers); // [1, 2, 3, 4]\n</code></pre><h2>Useful array functions</h2><ul><li><code>array_merge()</code> – merging arrays</li><li><code>array_keys()</code> and <code>array_values()</code></li><li><code>array_map()</code> – apply a function to each element</li><li><code>array_filter()</code> – filter an array</li><li><code>array_reduce()</code> – reduce to a single value</li></ul><pre><code class=\"language-php\">$nums = [1, 2, 3, 4];\n$sum = array_reduce($nums, fn($carry, $item) =&gt; $carry + $item, 0);\necho $sum; // 10\n</code></pre><h2>Best practices</h2><ol><li>Use associative arrays instead of multiple variables with similar meaning.</li><li>When iterating over large arrays, prefer <code>foreach</code> – it’s clear and safe.</li><li>For filtering and mapping, use built-in functions instead of writing loops manually.</li></ol><section class=\"faq\"><h2>FAQ</h2><h3>What is the difference between an indexed array and an associative array?</h3><p>An indexed array uses numeric indexes, while an associative array uses named keys.</p><h3>Does PHP have lists or dictionaries like other languages?</h3><p>In PHP, all such structures are implemented with arrays – they can act as lists, maps, or dictionaries.</p><h3>Can I mix data types in a single array?</h3><p>Yes, PHP allows storing different types in one array, e.g., numbers, strings, and objects.</p></section>",
    "position": 3,
    "slug": "array"
}
