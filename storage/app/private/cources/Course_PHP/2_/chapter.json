{
    "title": "PHP – variables, data types, constants, and syntax basics",
    "description": "Learn the basics of PHP: variables, data types, constants, scopes, and concatenation. Also, find out when to use single quotes and when to use double quotes.",
    "slug": "php-basics",
    "position": 2,
    "full_description": "<h1>PHP – variables, data types, constants, and syntax basics</h1><p>In this chapter, you will learn the fundamental elements of PHP, which are the foundation for creating dynamic web applications. We will cover <strong>variables</strong>, <strong>data types</strong>, <strong>constants</strong>, <strong>variable scope</strong>, and the difference between single quotes and double quotes. You will also learn how <strong>concatenation</strong> works in PHP.</p><h2>Variables in PHP</h2><p>Variables in PHP start with the <code>$</code> sign. They can store different values and change their type during program execution.</p><pre><code class=\"language-php\">&lt;?php\n$name = \"John\";\n$age = 25;\n$isActive = true;\n</code></pre><h2>Data types</h2><ul><li><code>string</code> – text</li><li><code>int</code> – integers</li><li><code>float</code> – floating-point numbers</li><li><code>bool</code> – boolean values (true/false)</li><li><code>array</code> – arrays</li><li><code>object</code> – objects</li><li><code>null</code> – no value</li></ul><h2>Constants in PHP</h2><p>Constants are values that cannot be changed during program execution. We create them using <code>define()</code> or <code>const</code>.</p><pre><code class=\"language-php\">&lt;?php\ndefine(\"SITE_NAME\", \"MyWebsite\");\nconst VERSION = \"1.0\";\n</code></pre><h2>Variable scope</h2><p>Variables can have different scopes:</p><ul><li><strong>Global</strong> – available throughout the script</li><li><strong>Local</strong> – available only inside a function</li><li><strong>Static</strong> – remember their value between function calls</li></ul><pre><code class=\"language-php\">&lt;?php\nfunction counter() {\n    static $i = 0;\n    $i++;\n    return $i;\n}\n\necho counter(); // 1\necho counter(); // 2\n</code></pre><h2>Single quotes vs. double quotes</h2><p>In PHP, there is a difference between using single quotes (<code>' '</code>) and double quotes (<code>\" \"</code>):</p><ul><li>Single quotes: the text is interpreted literally.</li><li>Double quotes: allow variable interpolation.</li></ul><pre><code class=\"language-php\">&lt;?php\n$name = \"John\";\necho 'Hello $name'; // Hello $name\necho \"Hello $name\"; // Hello John\n</code></pre><h2>Concatenation</h2><p>Concatenation means joining strings using the <code>.</code> operator.</p><pre><code class=\"language-php\">&lt;?php\n$firstName = \"John\";\n$lastName = \"Smith\";\necho $firstName . \" \" . $lastName; // John Smith\n</code></pre><h2>Best practices</h2><ol><li>Name variables and constants descriptively (<code>$userAge</code>, <code>MAX_USERS</code>).</li><li>Use <code>const</code> instead of <code>define()</code> when defining constants in application code.</li><li>Avoid mixing single and double quotes unnecessarily.</li></ol><section class=\"faq\"><h2>FAQ</h2><h3>Do variables in PHP have a fixed type?</h3><p>No, PHP is a dynamically typed language, so a variable’s type can change during execution.</p><h3>When should I use single quotes and when double quotes?</h3><p>Use single quotes when you want to display text literally. Double quotes are better when you need variable interpolation.</p><h3>Can a constant in PHP be overwritten?</h3><p>No, constants in PHP have immutable values – once defined, they cannot be overwritten.</p></section>"
}
